<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.3</version>
		<relativePath/>
	</parent>

	<groupId>com.banking</groupId>
	<artifactId>core.customerms</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>customerms</name>
	<description>Bootcamp Core Banking - CustomerMs</description>

	<properties>
		<java.version>17</java.version>
        <jacoco.version>0.8.8</jacoco.version>
	</properties>

	<dependencies>
        <!-- para conectar de mongo en docker -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
        </dependency>
        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- WebFlux -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

<!--        <dependency>-->
<!--            <groupId>org.mongodb</groupId>-->
<!--            <artifactId>mongodb-driver-reactivestreams</artifactId>-->
<!--            <version>4.4.1</version> &lt;!&ndash; Ejemplo: compatible con MongoDB 6.x - 8.x &ndash;&gt;-->
<!--        </dependency>-->

<!--		&lt;!&ndash; R2DBC &ndash;&gt;-->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-data-r2dbc</artifactId>-->
<!--		</dependency>-->

<!--		<dependency>-->
<!--			<groupId>io.github.resilience4j</groupId>-->
<!--			<artifactId>resilience4j-spring-boot2</artifactId>-->
<!--			<version>1.7.1</version>-->
<!--		</dependency>-->

<!--		<dependency>-->
<!--			<groupId>io.github.resilience4j</groupId>-->
<!--			<artifactId>resilience4j-reactor</artifactId>-->
<!--			<version>1.7.1</version>-->
<!--		</dependency>-->

		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
            <optional>true</optional>
		</dependency>

		<!-- Springdoc -->
<!--		<dependency>-->
<!--			<groupId>org.springdoc</groupId>-->
<!--			<artifactId>springdoc-openapi-webflux-ui</artifactId>-->
<!--			<version>1.6.15</version>-->
<!--		</dependency>-->

		<!-- Test (scope test) -->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-test</artifactId>-->
<!--			<scope>test</scope>-->
<!--		</dependency>-->

		<!-- Reactive MongoDB -->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>-->
<!--		</dependency>-->

        <!-- Reactor Test: StepVerifier -->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JUnit 5 + Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- Excluimos JUnit 4 para que solo se use JUnit 5 -->
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Mockito Core -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Mockito para JUnit 5 -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
	</dependencies>

	<build>
		<plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
			<!-- Spring Boot plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
            <!-- checkstyle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <configLocation>${project.basedir}/src/main/resources/checkstyle.xml</configLocation>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.9.1.2184</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <!-- Para ejecutar JaCoCo después de las pruebas -->
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <!-- Para generar el reporte de cobertura después de las pruebas -->
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- Umbrales de Cobertura -->
                <configuration>
                    <excludes>
                        <exclude>com/banking/core/customerms/model/*</exclude>
                        <exclude>com/banking/core/customerms/entity/*</exclude>
                        <exclude>com/banking/core/customerms/CustomermsApplication.class</exclude>
                    </excludes>
                    <rules>
                        <rule>
                            <element>BUNDLE</element>
                            <limits>
                                <limit>
                                    <counter>INSTRUCTION</counter>
                                    <value>COVEREDRATIO</value>
                                    <minimum>0.80</minimum><!-- Cobertura mínima del 80% -->
                                </limit>
                            </limits>
                        </rule>
                    </rules>
                </configuration>
            </plugin>
			<!-- Compiler plugin (annotation processing + source/target) -->
			<!-- OpenAPI Generator -->
		</plugins>
	</build>
</project>